[{"comments": ["Very cool idea and so simple!", "Thank you", "nixe work, what's  the range u get with it?", "If you use 30 cm antenna you can get a range of 100 m."], "Nvideos": [], "descr": ["A wireless microphone is a microphone without a physical cable connecting it directly to the sound recording or amplifying equipment with which it is associated. Also known as a radio microphone, it has a small, battery-powered radio transmitter in the microphone body, which transmits the audio signal from the microphone by radio waves to a nearby receiver unit, which recovers the audio. The other audio equipment is connected to the receiver unit by cable. ", "There are many different standards, frequencies and transmission technologies used to replace the microphone's cable connection and make it into a wireless microphone. They can transmit, for example, in radio waves using UHF or VHF frequencies, FM, AM, or various digital modulation schemes. Some low cost (or specialist) models use infrared light. Infrared microphones require a direct line of sight between the microphone and the receiver, while costlier radio frequency models do not. (-wikipedia)", "Once you have the Pi all set up, you\u2019ll be able to amplify your voice with any all-in-one radio or boombox. This could be useful for giving  lectures or presentations where it might be hard to hear you and there  isn\u2019t a professional PA system. You could also use it in a van or other  large vehicle to communicate over the car\u2019s speakers. ", "Here is the step-by-step instructions how raspberry pi can be used as a very good quality wireless microphone and can be used in class room, seminar, so keep reading.  ", "We know wireless microphone is actually a wireless radio transmitter. Microphone convert our voice (audio signal) into electrical signal and the transmitter transmit the signal as radio wave. Pi is acting as a FM transmitter in this project. So lets make our Pi FM  transmitter. For the thing I want to thank the people over at ", " have a new way to use it as FM Transmitter. They designed a program that turns the Pi into an FM radio transmitter.", "Our first work is to download the program in our cool Raspberry Pi. For that you must connected to the Internet first. Don't afraid, you only need the internet to download the software, you can use this afterwards without internet. Connect you pi to a monitor or use SSH for accessing your pi remotely (for details of remote access click ", "). OK, we are connected to out Raspberry Pi, now lets start downloading...", "One important thing: Connect a 20-30 cm wire (jumper wire will work fine) to the GPIO PIN 4 (shown in figure above) of your Raspberry Pi to increase the range of your transmitter. ", "1. Open your Pi terminal and type this into the terminal ", "This will download the python script that helps with the radio transmission. ", "2. Untar (unzip) the file you downloaded. Type this into the terminal  ", "3. Open your Radio App on your phone or if you still have a functioning radio tune to 100Mhz and then in your terminal type  sudo ./pifm sound.wav 100.0", "If everything went well you should now be hearing Star Wars sound track in your radio tuning at 100 MHz. You can transmit any frequency within FM range just typing the frequency instead of 100.0. ", "The Raspberry Pi comes with a 3.5mm analogue stereo audio output, but no input. As a radio amateur I am interested in using the Raspberry Pi as microphone to do this I need an audio  input. This can be achieved by connecting a USB audio device to your  Raspberry Pi.", "Make sure your Raspberry Pi is turned off and insert the USB audio device into one of the USB sockets on the Raspberry Pi, and then power  up your Raspberry Pi. The USB audio device should be automatically  installed. Go in SSH or  LXTerminal window and type  the following and press Enter ", "You may already have this package on your system, but entering this command won't do any harm even if you do. This will install a package of  ALSA utilities if you don't already have them (ALSA stands for Advances Linux Sound Architecture). If you want to know more about ALSA then follow the link:", ". ", "Now, You should make sure that the USB audio device is being detected by both the hardware and software. Enter the following command and press enter. (image 6)", "This will display information regarding attached USB devices. As you can see, the last device listed in the screenshot (image 6) above is the USB audio  device labelled as C-Media Electronics, Inc. Audio Adapter. So far, so good.", "You can adjust the volume of your microphone by by an utility called ", " ", "To start it, simply enter the name in the command line, like so:", "This presents a more graphical view (image 8,9,10) of the volume and information regarding the USB audio device. Using the arrow keys on your keyboard,  select the volume column and adjust the volume higher or lower,  dependent on your needs. Where possible, keep the volume level below  80\u201390% to avoid any distortion.", "Our FM transmitter and Microphone setup is ready to transmit our voice. Here is the command you will use to start the broadcast. Each piece will be  explained. Note that this command may need modified to work for your  mic, just keep reading.", "Let, break the code snippet", "Program we are using to record audio.", "Output 16-bit data. Needed this way for PiFM to read it.", "This specifies sampling rate to output recording. 22,050 is a good balance for speed and quality.", "to see all of the audio devices connected.", "Here sudo for root access, ./pifm run the FM module at  '100.1'  Mhz to  transmit and '22050' is the sampling rate of the input. If you did everything right, after you run the command you should be able  to tune your radio to 100.1 Mhz and hear yourself talking through the  mic!", "There are loads of ways of running a command at start-up in Linux but my favoured approach is to create an initialisation script in /etc/init.d  and register it using update-rc.d.  This way the application is started  and stopped automatically when the system boots / shutdowns.", "Create a bash script in /etc/init.d", "and add the following lines", "press 'Ctrl+X' than 'y' and than enter", "Make script executable", "Test by starting the program and saying something to microphone.  ", "Press Ctrl+c to exit", "Register script to be run at start-up", "To register your script to be run at start-up and shutdown, run the following command:", "Note - The header at the start is to make the script LSB compliant and provides details about the start up script and you should only need to  change the name.  If you want to know more about creating LSB scripts  for managing services, see ", "If you ever want to remove the script from start-up, run the following command:", "If everything goes fine then our program will start automatically every time Raspberry Pi gets power. ", "We need to modify USB microphone slightly. I want to remove the stand form the microphone. For that, first open the screws from the bottom of the stand and bring out the controller circuit. Cut the connecting wires of switch & microphone to the controller circuit.  Now separate the microphone from the stand and solder it to the controller. ", "Now, cover the controller & microphone with some felt, attached a clip with the cord. Your microphone is ready to use. ", "If you completed all the steps before now it is the time to test your invention. Attached the power bank with pi case using some glue. Connect your modified microphone to Raspberry Pi. Power up your pi with power bank. Tuned your FM receiver attached with the speaker to the frequency you set previously. Now you can say anything you like and transmit it to the speaker and broadcast it. You can attached your microphone to your shirt with a clip and raspberry pi in your pocket and moved anywhere in the room. "], "author": ["taifur"], "projectID": "http://www.instructables.com/id/Raspberry-Pi-Based-Wireless-Microphone/?ALLSTEPS", "views": ["favorites:70", "views:6118"], "award": ["featured"], "date": ["2015-09-16 20:02:36.0"], "relatedURL": ["/id/Easy-and-low-cost-FM-transmitter-DIY-kit/", "/id/Raspberry-Pi-Radio-Transmitter/", "/id/Mini-Audio-Transmitter/", "/id/Raspberry-Pi-Wireless-Bluetooth-Audio-FM-Radio-Tra/"], "scripts": ["wget ", "tar xvzf pifm.tar.gz\n", "sudo ./pifm sound.wav 100.0 ", "sudo apt-get install alsa-utils", "lsusb", "alsamixer", "arecord -fS16_LE -r 22050 -Dplughw:1,0 - | sudo ./pifm - 100.1 22050", "arecord", "-fS16_LE", "-r 22050", "-Dplughw:1,0", "sudo ./pifm - 100.1 22050", "sudo nano /etc/init.d/autostartpifm.sh", "#!/bin/bash \ncd /home/pi \narecord -fS16_LE -r 22050 -Dplughw:1,0 - | sudo ./pifm - 100.1 22050", "sudo chmod 755 /etc/init.d/autostartpifm.sh", "sudo /etc/init.d/autostartpifm.sh start", "sudo update-rc.d autostartpifm.sh defaults", "sudo update-rc.d -f  autostartpifm.sh remove"], "Nlinks": ["http://www.icrobotics.co.uk/wiki/index.php/Main_Page", "https://www.raspberrypi.org/documentation/remote-access/ssh/", "http://www.alsa-project.org/main/index.php/Main_Page", "http://wiki.debian.org/LSBInitScripts"], "keywords": ["technology audio"], "title": ["Raspberry Pi Based Wireless FM Microphone"], "Nimages": ["http://cdn.instructables.com/F3Y/TOIU/IENBGPKS/F3YTOIUIENBGPKS.MEDIUM.jpg", "/static/img/pixel.png", "http://cdn.instructables.com/FI0/U3I0/IEKJ1QKG/FI0U3I0IEKJ1QKG.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FP3/K7RJ/IEKJ1MH0/FP3K7RJIEKJ1MH0.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FUN/ATDE/IEKIYXLQ/FUNATDEIEKIYXLQ.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FXN/9Y7C/IEKIZGLU/FXN9Y7CIEKIZGLU.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/F2B/VMXV/IEKIZG6N/F2BVMXVIEKIZG6N.MEDIUM.jpg", "http://cdn.instructables.com/FIP/WD95/IEKIZG0L/FIPWD95IEKIZG0L.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FTI/8QBB/IEMNI17M/FTI8QBBIEMNI17M.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/F4T/JDPV/IENBGPDV/F4TJDPVIENBGPDV.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png"], "Nsteps": ["8 Steps"], "tags": ["raspberry pi", "fm transmitter", "usb microphone", "voice transmission"], "contentExtra": []},
{"comments": ["This is really cool!  Thanks for the shout-out, too.  Nice work", "How do you prevent the unplugging of your Arduino box ?", "You could prevent it from being unplugged from the TV by simply making it the only connector cable in the house. You could prevent it from being unplugged from the power supply by having backup batteries. There are a number of options. But when you get right down to it, if someone is determined, they will get past any system.", "You also could power the TV from the exercise you did (or are doing at the same time to save a battery). That will make it a greener project!", "That is a good idea. I just don't have my bike generator set up yet."], "Nvideos": ["<div class=\"video-container\"><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"576\" src=\"https://www.youtube.com/embed/SgjkTxW4QY8?feature=oembed\" width=\"1024\"></iframe></div>"], "descr": ["Most of us spend far too much time in front of the TV. So I designed a system that will automatically limit when and how much the TV can be on. The system works by controlling the input signal going to the TV. This is done by adding a relay switch to the input cable. When certain conditions are met, the relay is turned on and the TV is able to receive the input signal. Using an Arduino microcontroller, you can program the system to only allow the TV to be on for a certain amount of time each day or between certain hours. You can setup a pin code so that only certain people can turn it on. You could even set it up so that the TV will not turn on unless you have done a certain amount of exercise that day. The system is very versatile and can be customized to fit your needs.", "This project is a remix of the project \"", "\" by user \"", ".\" I saw this project a while back and I just had to make my own version. I attempted to broaden the scope of the project and make it more adaptable to alternate configurations. ", "Here is a video walkthrough of the project.", "Here are the materials and tools that I used when making this project. ", "Arduino Microcontroller and Power Supply", "5V Relay (the coil current must be less than 30mA)", "Diode", "Perf Board", "Insulated Project Enclosure", "Input Connector Cables for your TV", "Input Switching Box (optional)", "Jumper Wires", "Screw Driver", "Soldering Iron and Solder", "Wire Cutters", "Wire Strippers", "Hot Glue Gun and Glue Sticks (optional)", "The control circuit for this project is very simple. It is basically just an Arduino microcontroller and a 5 volt relay. In order to power the relay directly from the Arduino, the coil of the relay needs to be rated for 30 mA or less. If your relay requires more than 30 mA, then you need to add a transistor to drive the relay. The normally open terminal and common terminal  of the relay are connected to the input cable. The coil of the relay is connected to one of the digital pins and one of the GND pins on the Arduino. A diode is connected in parallel with the coil of the relay to protect the Arduino from voltage spikes that can occur when the relay turns off. ", "Normally the digital pin is set LOW. This means that the relay is turned off and the two halves of the input wire are disconnected. In this state, the signal cannot reach the TV. But when the digital pin is set HIGH, the relay turns on and connects the two halves of the input cable. This is how the Arduino determines when the TV receives the signal from the input device. ", "The first thing that you need to do is get a connector cable that matches the input terminals on your TV and the signal source. The most common types are ", ", ", ", and ", ". ", "Next we need to cut the connector cable in the middle. Then strip off about 2 inches of the outer most layer of insulation to expose the first layer of internal wires. Separate and peel back these wires to expose the next layer of insulation. Strip off about half of this exposed section of insulation. This will reveal the inner wires. Twist the first set of wires together. Then twist the second set of wires together. You should now have two separate strands of wires that you can connect these wires to a relay switching circuit. ", "This simple procedure will work well for RCA cables and coxial cables. However, HDMI cables are a little more complicated. There are a lot of wires inside an HDMI cable. If you want to try to manually separate the wires of an HDMI cable you will need a lot of time and patience and you need to be very careful. An alternate method that might make things easier is to use an HDMI break-out board such as ", ".", "Start with a blank piece of perf board. Solder the relay onto one side of the board. Then solder the diode onto the board adjacent to the relay and connect the leads of the diode to the coil terminals of the relay. Next you need to connect the wires from the input cable. ", "The inner most sets of wires can just be soldered back together by attaching them to adjacent holes and connecting them with a bead of solder. The outer set of wires in each cable will all be grouped together. With RCA cable these wires are all connected together as a ground. So it won't affect the signal. These wires are soldered to the board. Then a jumper wire connects them to the switch terminals of the relay. ", "The last connections to make are the wires that will connect to the Arduino. Connect one wire to each terminal of the relay's coil. ", "Now you need to connect the relay circuit to the Arduino. Connect the wires from the relay board to the Arduino so that the anode of the diode is connected to one of the GND pins on the board. Then take the wire that is connected to the cathode of the diode and plug that into one of the digital pins on the Arduino board. It is very important that you get these polarities correct. If you accidentally reverse them, you could destroy the Arduino. ", "Find a large insulated project enclosure. Then attach the relay circuit and the Arduino to the inside of the housing with a small drop of hot glue. A small drop of hot glue will be just enough to hold the boards in place but still allow you to remove them later if you want. Cut holes and slots in the back of the housing for the cables and power cords and sensor wires. ", "Now you need to decide on the set of conditions that will allow the TV to be connected. There are a lot of ways that you can do this. ", "The simplest method is to use a simple timer. For example the TV will only be connected between certain hours (such as 6PM to 8PM). Another option is to set a certain number of hours each day that the TV can be on. This limit the number of hours like the first option but is not restricted to a certain time of day. You can also create pass codes that will only allow certain people to turn the TV on. If you want to make sure that your family gets more exercise, you can set up the system so that the TV will only turn on if you have done a certain amount of exercise that day. The possibilities are endless. So use your imagination. ", "In the next few steps, I will give some examples of how you could set the system up in different ways. ", "The simplest kind of control program is a window timer. Here is a very basic example of this. Once the system is activated, the TV will be connected for 1 hour (3600000 milliseconds). Then it will be off for 23 hours (82800000 milliseconds). This will create a one hour window each day where the TV can be watched. You can easily change the timing of this by changing the values in the code. ", "Alternatively, you could set up a button to activate the TV watching time. This would let the user select when the TV may be on but still limit the total number of hours per day that it is on.", "Another variation on the design that you could implement involves setting a pass code so that only authorized users can turn the TV on. This can easily be done with the TV remote. All you need to do is add an infrared receiver to the Arduino. You can check out an example of how to do that here:  ", "You can either use a single key button as in the example, or you can create a secret combination of buttons that will activate the TV.", "My favorite way to control a TV limiting system is with exercise. The simplest way to do this is to set up a sensor on an exercise bike that will send a signal to the control circuit when someone is pedaling. This will let you program the system to only let the TV be on while someone is exercising on the exercise bike. The more you want to watch TV, the more you have to exercise. You can see a good example of this kind of system in the project \"", "\" by Instructables user \"", ".\"", "Another way to set up this kind of system is to use a heart rate monitor. Here is an example of a simple DIY heart that was published by Make magazine.", "Other good examples of DIY heart rate monitors include the following instructables:", "You can use the heart rate sensor to measure how active the person is being. So you can program the system to only let the TV be only while the person's heart rate is elevated. Or you could program it to only turn on if the person has had their heart rate above a set level for a certain number of minutes a day (indicating that the person has exercised).", "Most ways that you might set up your TV limiting system will requires sensors of one kind or another and these need to be connected to your Arduino. Connecting sensors to an Arduino is easy. There are two main kinds of inputs with an Arduino. There are analog inputs and there are digital inputs. ", "Analog inputs detect the relative voltage of a signal. To measure an analog input, connect the ground wire of the sensor to one of the GND pin on the Arduino. Then connect the signal wire to one of the analog input pins on the Arduino. Then set this pin to input mode and use the analogRead function in the Arduino code. The Arduino will then measure the voltage of the input signal and turn it into an integer value between 0 and 1023. This corresponds to a voltage between 0 and 5 volts. Analog inputs are a good way to monitor signals that change over time.", "Digital inputs just detect whether a signal is above a certain threshold voltage (3 volts for a 5 volt Arduino). These are useful for detecting simple on-off states. Is the signal there or not. To use this king of input, connect the ground wire from the sensor to one of the GND pins on the Arduino. Connect the signal wire to one of the digital pins on the Arduino. Then set this pin to input mode and use the digitalRead function in the Arduino code. The Arduino will then measure the voltage of the input signal and register it as either HIGH (above 3 volts) or LOW (below 3 volts).", "Set up the box with the control circuit near your TV. Then plug one end of the cable into your TV and plug the other end into the signal source. I used an RCA cable to connect my XBOX 360 to the TV. Lastly connect your chosen sensors that will control they system.", "This system is an interesting way to cut back on the amount of TV that we consume. Use your imagination and have fun. "], "author": ["DIY Hacks and How Tos"], "projectID": "http://www.instructables.com/id/System-For-Automatically-Limiting-TV-Time/?ALLSTEPS", "views": ["favorites:80", "views:5947"], "award": ["featured"], "date": ["2015-09-16 18:49:40.0"], "relatedURL": ["/id/Control-Any-Circuit-With-a-TV-Remote-and-an-Arduin/", "/id/Invisible-Signally-Beacon-Infrared-LED-Throwie/", "/id/Sound-Activated-Outlet/", "/id/Frozen-Pipe-Alarm/"], "scripts": [], "Nlinks": ["http://www.instructables.com/id/No-TV-unless-you-exercise/", "http://www.instructables.com/member/plays+in+traffic/", "https://en.wikipedia.org/wiki/Coaxial_cable", "https://en.wikipedia.org/wiki/RCA_connector", "https://en.wikipedia.org/wiki/HDMI", "http://www.gravitech.us/hdbrbo.html", "http://www.instructables.com/id/Control-Any-Circuit-With-a-TV-Remote-and-an-Arduin/", "http://www.instructables.com/id/No-TV-unless-you-exercise/", "http://www.instructables.com/member/plays+in+traffic/", "http://www.instructables.com/id/Microcontroller-measures-heart-rate-through-finger/", "http://www.instructables.com/id/Electrocardiograph-Heart-Rate-Monitor/", "http://www.instructables.com/id/Simple-DIY-Pulse-Sensor/", "http://www.instructables.com/id/Smart-Heart-Monitor/"], "keywords": ["technology microcontrollers"], "title": ["System For Automatically Limiting TV Time"], "Nimages": ["http://cdn.instructables.com/FGM/YN5C/IEJSLJK8/FGMYN5CIEJSLJK8.MEDIUM.jpg", "http://cdn.instructables.com/FGB/YC2T/IEB7Z5F7/FGBYC2TIEB7Z5F7.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FKW/AGSM/IEE2UEZ5/FKWAGSMIEE2UEZ5.MEDIUM.jpg", "/static/img/pixel.png", "http://cdn.instructables.com/FOL/TACQ/IDRLEMG9/FOLTACQIDRLEMG9.MEDIUM.jpg", "http://cdn.instructables.com/FYB/TCWJ/IEB7ZWN6/FYBTCWJIEB7ZWN6.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FZ5/8EGI/IEE2UOWM/FZ58EGIIEE2UOWM.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/F0X/LSYG/IEE2UU55/F0XLSYGIEE2UU55.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FGK/05NV/IEE2UW8C/FGK05NVIEE2UW8C.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FSJ/TGR2/IEE2V2UA/FSJTGR2IEE2V2UA.MEDIUM.jpg", "/static/img/pixel.png", "http://cdn.instructables.com/F4W/MD7V/IEE2WGA4/F4WMD7VIEE2WGA4.MEDIUM.jpg", "http://cdn.instructables.com/FGQ/8F2U/IEE2WUIK/FGQ8F2UIEE2WUIK.MEDIUM.jpg", "/static/img/pixel.png", "/static/img/pixel.png", "http://cdn.instructables.com/FUK/AGBE/IEEOC4XH/FUKAGBEIEEOC4XH.MEDIUM.jpg", "http://cdn.instructables.com/FMN/QI0V/IEEOCO5C/FMNQI0VIEEOCO5C.MEDIUM.jpg", "/static/img/pixel.png", "http://cdn.instructables.com/FQJ/WE5U/IEFI8YEO/FQJWE5UIEFI8YEO.MEDIUM.jpg", "/static/img/pixel.png"], "Nsteps": ["14 Steps"], "tags": ["DIY Hacks and How Tos", "Jason Poel Smith", "diy_hacks", "diyhacksandhowtos", "TV", "exercise", "exercise bike", "TV limiter", "monitor", "automatic"], "contentExtra": []},
{"comments": ["Could you implement a more \"standalone\" version of the project. Using a microphone or aux input instead of using the pc? And have so that the different colors are on in different frequencies, like green for bass red for hight and blue for low? Great project though!", "will the lamp flicker standalone without the laptop?", "Not at the moment, The laptop is being used as a power source and a microphone "], "Nvideos": ["<div class=\"video-container\"><iframe allowfullscreen=\"\" frameborder=\"0\" height=\"576\" src=\"https://www.youtube.com/embed/QcH1ikARU_4?feature=oembed\" width=\"1024\"></iframe></div>"], "descr": ["Here is a quick guide showing how I turned my traditional desk lamp into a colorful sound equalizer using Arduino and Processing.", "For this specific project you will obviously need a lamp. ", "I recycled this lamp after it's original bulb broke, inspiring me to replace it with an RGB led.", "The RGB led is taped to the inside of the lamp head and I have extended the 4 connecting pins with jumper cables running down the back of the lamp.", "These pins are then connected to my Arduino UNO. ", "I have used an old ski goggle bag to house the Arduino for convenience ", "but feel free to house it however you like. ", "The important part here is  making sure the Arduino can sit close enough to the lamp head to reach  the RGB led.", "The first thing you will need for your sketch is install a Processing Sound Library to your Processing app.", "Download one here if you need to (Mac, Windows, Linux) -  ", " ", "( download this file and unzip it into your /Libraries folder in your  processing application to install the sound magic in processing.)", "OR just take the 'SoundFaceUtil.java' file i have attached to this step and put it in your /Libraries.", "This  library uses your computers built in speakers to measure things like  Volume, Normal Volume, Tempo and Key as variables within your code. Once  processing can feel the music we have to send this data back to Arduino  over the serial port. If your Processing preferences are default you  will be using 19200 baud to pass this information just like in the PDE sketch i have provided.", "Now we are ready to set up the Arduino.", "This Arduino code reads the data from processing (over the 19200baud) and tells the lamp to shine a bright purple/blue when there is little to no sounds and past a certain volume the lamp will shine RGB colours randomly.", "Upload this code to your Arduino and run your Processing sketch to power on the lamp.", "The lamp will flash and then start in OFF mode but as soon as you clap your hands or play music your new musical RGB lamp will come to life.     ", "E N J O Y the lamp and stay tuned for upgrades and developments ;) "], "author": ["Carl Gordon Media"], "projectID": "http://www.instructables.com/id/Musical-RGB-Lamp/?ALLSTEPS", "views": ["favorites:127", "views:3419"], "award": ["featured"], "date": ["2015-09-16 16:26:35.0"], "relatedURL": ["/id/RGB-RFID-Lamp/", "/id/Bluetooth-Controlled-Recycled-Rainbow-Lamp/", "/id/Arduino-Powered-Party-Shirt/", "/id/This-Is-Your-Brain-On-Music/"], "scripts": [], "Nlinks": ["https://github.com/processing/processing-sound/tr..."], "keywords": ["technology arduino"], "title": ["Musical RGB Lamp"], "Nimages": ["http://cdn.instructables.com/F4A/H4UQ/IEM1C9QL/F4AH4UQIEM1C9QL.MEDIUM.jpg", "http://cdn.instructables.com/FNF/9D4A/IEN4QIGO/FNF9D4AIEN4QIGO.MEDIUM.jpg", "http://cdn.instructables.com/FIU/JC1B/IEN4QJS6/FIUJC1BIEN4QJS6.MEDIUM.jpg", "http://cdn.instructables.com/FOE/C7H2/IEN4QJLM/FOEC7H2IEN4QJLM.MEDIUM.jpg"], "Nsteps": ["3 Steps"], "tags": ["Lamp", "light", "rgb", "arduino", "processing", "electronics", "recycle", "sound", "music", "party"], "contentExtra": ["Sound_Write.pde", "SoundFaceUtil.java"]}]